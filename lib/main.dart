import 'dart:core';
import 'package:e_commerce/Autogenerated.dart';
import 'package:e_commerce/CategoryData.dart';
import 'package:e_commerce/CategoryProvider.dart';
import 'package:e_commerce/StoreData.dart';
import 'package:e_commerce/StoreDataProvider.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'DetailsActivty.dart';
import 'ProductProvider.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MultiProvider(providers: [ChangeNotifierProvider(create: (context) => ProductProvider(),),ChangeNotifierProvider(create: (context) => CategoryProvider()),ChangeNotifierProvider(create: (context) => StoreDataProvider()),],
      child: MaterialApp(debugShowCheckedModeBanner: false,
      title: 'Flutter Demo',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    ),
    );


  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});
  final String title;
  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {


  final String title = "";
  int currentPageIndex = 0;


    final List _data =[
    {"text": "Snekers","image": "assets/images/snekers.png"},
    {"text": "Watch","image": "assets/images/watch.jpg"},
    {"text": "Jacket","image": "assets/images/jacket.png"},
    {"text": "Bag","image": "assets/images/bag.jpg"},
    {"text": "Wallet","image": "assets/images/wallet.jpg"},
  ];

   Future<List<Autogenerated>> ?productFuture;
   Future<List<CategoryData>> ?categoryFuture;
   Future<List<StoreData>> ?storeFuture;


  final List _selectedIndexs=[];

  void getProduct(ProductProvider productProvider){
    productFuture = productProvider.getProduct();
  }
  void getCategory(CategoryProvider categoryProvider){
    categoryFuture = categoryProvider.getCategory();
  }

  void getStore(StoreDataProvider storeDataProvider){
    storeFuture = storeDataProvider.getStoreData();
  }

  @override
  void initState() {
    getProduct(context.read<ProductProvider>());
    getCategory(context.read<CategoryProvider>());
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    final productProvider = Provider.of<ProductProvider>(context);
    final catergoryProvider = Provider.of<CategoryProvider>(context);

    return Scaffold(
      appBar: AppBar(
        actions: <Widget>[
          IconButton(
            icon: const Icon(Icons.account_circle_rounded),
            onPressed: () {
              setState(() {
              });
            },
          )
        ],
      ),
      body: <Widget>[
        /// Home page
         Padding(
          padding: const EdgeInsets.only(left: 15,right: 15),
          child: Column(
            children: [
              const Align(alignment: Alignment.centerLeft,child: Text("Our",style: TextStyle(fontSize: 30))),
              const Align(alignment: Alignment.centerLeft,child: Text("Products",style: TextStyle(fontSize: 30,fontWeight: FontWeight.bold))),
              Padding(
                padding: const EdgeInsets.only(top: 10),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    Container(
                      width: 270,
                      height: 50,
                      child: TextField(
                        decoration: InputDecoration(
                            prefixIcon: const Icon(Icons.search),
                            hintText: 'Search Products',
                            filled: true,
                            fillColor: const Color(0xFFf3f3f2),
                            enabledBorder: OutlineInputBorder(
                                borderSide: const BorderSide(
                                    color: Color(0xFFf3f3f2), width: 1),
                                borderRadius: BorderRadius.circular(10)),
                            //labelText: "01266",
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(10),
                              borderSide: const BorderSide(),
                            )),
                        keyboardType: TextInputType.text,
                      ),

                    ),
                    Card(elevation: 3,
                      child:Container(height: 50,width: 50,child:
                      Icon(Icons.shuffle),) ,
                    )
                  ],
                ),
              ),

              //category

              Container(margin: const EdgeInsets.symmetric(vertical: 20),
                height: 50,
                child: FutureBuilder<List<CategoryData>>(
                  future: categoryFuture,
                  builder: (context, snapshot) {
                    if (!snapshot.hasData){
                      return CircularProgressIndicator();
                    }
                    else{
                      return ListView.builder(
                        itemCount: snapshot.data?.length ,
                        itemBuilder: (BuildContext context, int index){
                          final _isSelected=_selectedIndexs.contains(index);
                          final data = _data[index];
                          return Ink(
                            child: InkWell(
                              child: Padding(
                                padding: const EdgeInsets.only(right: 10),
                                child: Container(
                                  decoration: BoxDecoration(
                                    border: Border.all(width: 1, color: _isSelected?Colors.red:Colors.black12),
                                    borderRadius: BorderRadius.circular(6),
                                    color: Colors.white,
                                  ),
                                  child: Row(mainAxisAlignment: MainAxisAlignment.spaceEvenly,children: [
                                    //Icon(data["icon"]),
                                    //Image.asset(data["image"],width: 30,height: 30),
                                    Image.network(snapshot.data?[index].image?? "",height: 50),
                                    Padding(
                                      padding: const EdgeInsets.only(right: 7,left: 5),
                                      child: Text(snapshot.data?[index].name ?? "",style: TextStyle(fontWeight: FontWeight.bold),),
                                    )
                                  ]),
                                ),
                              ),
                              onTap: (){
                                setState(() {
                                  if(_isSelected){
                                    _selectedIndexs.remove(index);

                                  }else{
                                    _selectedIndexs.add(index);

                                  }
                                  //_containerColor = Colors.redAccent;
                                });
                              },
                            ),
                          );
                        },
                        scrollDirection: Axis.horizontal,
                      );
                    }
                },

                ),),

              //item

              Container(
                height: 300,
                child:
                FutureBuilder<List<Autogenerated>>(
                  future: productFuture,
                  builder: (context, snapshot) {
                    if (snapshot.hasData) {
                      return  GridView.count(
                        childAspectRatio: MediaQuery.of(context).size.height / 1100,
                        physics: const AlwaysScrollableScrollPhysics(),
                        crossAxisCount: 2,
                        children: List.generate(snapshot.data?.length?? 0,(index) {
                          return Padding(
                            padding: const EdgeInsets.only(right: 10,bottom: 10),
                            child: InkWell(
                              child: Card(elevation: 1.5,
                                  child: Container(
                                width: 160,
                                height: 200,
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(14),
                                  color: Colors.white,
                                ),
                                child:  Column(children: [
                                  const Padding(
                                    padding: EdgeInsets.only(top: 10,left: 15),
                                    child: Align(alignment: Alignment.centerLeft,
                                        child: Icon(Icons.favorite_border)),
                                  ),
                                   Image.network(snapshot.data?[index].images?.first??'',height: 100),
                                  Padding(
                                    padding: const EdgeInsets.only(left: 10,right: 0),
                                    child: Text(snapshot.data?[index].title ?? "",style: TextStyle(fontWeight: FontWeight.bold,fontSize: 12),),
                                  ),
                                   Padding(
                                    padding: const EdgeInsets.only(left: 35,top: 5,bottom: 5),
                                    child: Row(children: [
                                      const Text('\$',style: TextStyle(fontWeight: FontWeight.bold,fontSize: 10,color: Colors.deepOrange),),
                                      Text('${snapshot.data?[index].price ?? 0}' ,style: const TextStyle(fontWeight: FontWeight.bold,fontSize: 18),),
                                    ],),
                                  )
                                ]),
                              )),onTap: (){
                              setState(() {
                                Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                        builder: (context) => const DetailsActivty()));
                              });
                            },
                            ),
                          );
                        }),
                      );
                    } else if (snapshot.hasError) {
                      return Text(snapshot.error.toString());
                    }
                    // By default show a loading spinner.
                    return const CircularProgressIndicator();
                  },
                )

                ,),
              //item
            ],
          ),
        ),

        /// search page
         Padding(
          padding: EdgeInsets.only(top: 20,left: 10,right: 10,bottom: 20),
          child: Column(
            children: <Widget>[
              Container(
                width: 330,
                height: 50,
                child: TextField(
                  decoration: InputDecoration(
                      prefixIcon: const Icon(Icons.search),
                      hintText: 'Search Products',
                      filled: true,
                      fillColor: const Color(0xFFf3f3f2),
                      enabledBorder: OutlineInputBorder(
                          borderSide: const BorderSide(
                              color: Color(0xFFf3f3f2), width: 1),
                          borderRadius: BorderRadius.circular(10)),
                      //labelText: "01266",
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(10),
                        borderSide: const BorderSide(),
                      )),
                  keyboardType: TextInputType.text,
                ),

              ),
              const Padding(
                padding: EdgeInsets.only(top: 20),
                child: Card(
                  child: ListTile(
                    leading: Icon(Icons.shopify),
                    title: Text('Search Item'),
                    subtitle: Text('Available'),
                  ),
                ),
              ),

            ],
          ),
        ),
        /// Shopping page
         Padding(
          padding: const EdgeInsets.only(left: 20,right: 20),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              const Row(mainAxisAlignment: MainAxisAlignment.spaceBetween,children: [
               Column(crossAxisAlignment: CrossAxisAlignment.start,
                 children: [
                         Text("Shopping",style: TextStyle(fontSize: 30)),
                Text("Cart",style: TextStyle(fontSize: 30,fontWeight: FontWeight.bold)),
               ],),
                Icon(Icons.delete)
              ],),
              Container(margin: const EdgeInsets.symmetric(vertical: 20),
                height: 300,
                child: ListView.builder(
                  itemCount: 8,
                  itemBuilder: (BuildContext context, int index){
                    final _isSelected=_selectedIndexs.contains(index);
                    return Ink(
                      child: InkWell(
                        child: Padding(
                          padding: const EdgeInsets.only(right: 10),
                          child: Container(
                            height: 100,
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(14),
                              color: Colors.white,
                            ),
                            child:  const Column(
                              children: [
                                Row(
                                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,children: [
                                  Image(image: AssetImage("assets/images/shoes.png"), width: 100, height: 100),
                                  Column(crossAxisAlignment: CrossAxisAlignment.start,mainAxisAlignment: MainAxisAlignment.end,
                                    children: [
                                      Text("Nike Air Max 200",style: TextStyle(fontWeight: FontWeight.bold),),
                                      Padding(
                                        padding: EdgeInsets.only(top: 5,bottom: 15),
                                        child: Row(children: [
                                          Text('\$',style: TextStyle(fontWeight: FontWeight.bold,fontSize: 10,color: Colors.deepOrange),),
                                          Text("240.00",style: TextStyle(fontWeight: FontWeight.bold,fontSize: 23),),
                                        ],),
                                      ),

                                    ],
                                  ),
                                  Icon(Icons.one_x_mobiledata),

                                ]),

                              ],
                            ),
                          ),
                        ),
                        onTap: (){
                          setState(() {
                            if(_isSelected){
                              //_selectedIndexs.remove(index);

                            }else{
                              //_selectedIndexs.add(index);

                            }
                            //_containerColor = Colors.redAccent;
                          });
                        },
                      ),
                    );
                  },
                  // This next line does the trick.
                  scrollDirection: Axis.vertical,

                ),),

              Container(
                height: 2,color: const Color(0xFFf3f3f2),
              ),
              const Row(mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text("3 items"),
                  Text("\$ 350",style: TextStyle(fontWeight: FontWeight.bold,fontSize: 20)),
                ],
              ),
              ElevatedButton(
                onPressed: () {
                },
                style: ElevatedButton.styleFrom(
                    shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(
                          10,
                        )),
                    minimumSize: const Size(216, 40),
                    foregroundColor: Colors.white,
                    // Text Color (Foreground color)
                    textStyle: const TextStyle(
                      color: Colors.white,
                      fontSize: 20,
                    ),
                    backgroundColor: Colors.deepOrangeAccent),
                child: const Text("Next",style: TextStyle(fontSize: 15)),
              ),

            ],
          ),
        ),


        /// Favorites page
         Padding(
          padding: EdgeInsets.all(8.0),
          child: Column(
            children: <Widget>[
              Container(
                height: 300,
                child:
                FutureBuilder<List<StoreData>>(
                  future: storeFuture,
                  builder: (context, snapshot) {
                    if (snapshot.hasData) {
                      return  GridView.count(
                        childAspectRatio: MediaQuery.of(context).size.height / 1500,
                        physics: const AlwaysScrollableScrollPhysics(),
                        crossAxisCount: 2,
                        children: List.generate(snapshot.data?.length?? 0,(index) {
                          return Padding(
                            padding: const EdgeInsets.only(right: 10,bottom: 10),
                            child: InkWell(
                              child: Card(elevation: 1.5,
                                  child: Container(
                                    width: 160,
                                    height: 200,
                                    decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(14),
                                      color: Colors.white,
                                    ),
                                    child:  Column(children: [
                                      const Padding(
                                        padding: EdgeInsets.only(top: 10,left: 15),
                                        child: Align(alignment: Alignment.centerLeft,
                                            child: Icon(Icons.favorite_border)),
                                      ),
                                      Image.network(snapshot.data?[index].image?? "",height: 100),
                                      Padding(
                                        padding: const EdgeInsets.only(left: 10,right: 0),
                                        child: Text(snapshot.data?[index].title ?? "",style: TextStyle(fontWeight: FontWeight.bold,fontSize: 12),),
                                      ),
                                      Text('${snapshot.data?[index].price ?? 0}' ,style: const TextStyle(fontWeight: FontWeight.bold,fontSize: 18),),
                                       Text(snapshot.data?[index].category ?? "",style: TextStyle(fontWeight: FontWeight.bold,fontSize: 10,color: Colors.deepOrange),),
                                    ]),
                                  )),onTap: (){
                              setState(() {
                                Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                        builder: (context) => const DetailsActivty()));
                              });
                            },
                            ),
                          );
                        }),
                      );
                    } else if (snapshot.hasError) {
                      return Text(snapshot.error.toString());
                    }
                    // By default show a loading spinner.
                    return const CircularProgressIndicator();
                  },
                )

                ,),
            ],
          ),
        ),
      ][currentPageIndex],
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            const DrawerHeader(
              decoration: BoxDecoration(
                color: Colors.green,
              ),
              child: Text(
                'Navigation Drawer',
                style: TextStyle(fontSize: 20),
              ),
            ),
            ListTile(
              leading: const Icon(Icons.person),
              title: const Text(' My Profile '),
              onTap: () {
                Navigator.pop(context);
              },
            ),
            ListTile(
              leading: const Icon(Icons.video_label),
              title: const Text(' Saved '),
              onTap: () {
                Navigator.pop(context);
              },
            ),
            ListTile(
              leading: const Icon(Icons.edit),
              title: const Text(' Edit Profile '),
              onTap: () {
                Navigator.pop(context);
              },
            ),
            ListTile(
              leading: const Icon(Icons.logout),
              title: const Text('LogOut'),
              onTap: () {
                Navigator.pop(context);
              },
            ),
          ],
        ),
      ),
      bottomNavigationBar: NavigationBar(
        onDestinationSelected: (int index){
          setState(() {
            currentPageIndex = index;
          });
        },indicatorColor: Colors.deepOrange,
        indicatorShape: const CircleBorder(side: BorderSide.none),

        selectedIndex: currentPageIndex,
        destinations: const<Widget>[
          NavigationDestination(selectedIcon: Icon(Icons.home),
            icon: Icon(Icons.home_outlined),label: "",),
          NavigationDestination(
            icon: Icon(Icons.search),label: "",),
          NavigationDestination(
            icon: Icon(Icons.shop),label: "",),
          NavigationDestination(
            icon: Icon(Icons.favorite_border),label: "",),
        ],
      ),
    );
  }
}



